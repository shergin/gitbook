## Объектная модель Git ##

### Алгоритм SHA ###

Вся информация, необходимая для представления истории проекта, находится в файлах с 40-символьным именем, которое выглядит примерно так:

    6ff87c4664981e4397625791c8ea3bbb5f2279a3

В Git вы постоянно будете встречаться с этими 40-символьными строками.
В каждом случае это имя является хешем содержимого объекта и генерируется с помощью криптографической хеш-функции по алгоритму SHA1.
Для нас это значит, что практически невозможно найти два различных объекта с одним и тем же именем. Отсюда ряд преимуществ, среди которых:
- Git может быстро определить, являются ли два объекта идентичными или нет, просто сравнив их имена.
- Так как имена объектов вычисляются одним и тем же способом в каждом репозитории, то объекты с одинаковым содержимым в двух репозиториях будут сохранены под одним и тем же именем.
- Git может выявлять ошибки чтения объекта, сравнив его имя и вычислив хеш содержимого по алгоритму SHA1.

### Объекты ###

Каждый объект содержит три атрибута: **тип**, **размер** и **содержимое**.
_Размер_ - это просто размер содержимого, которое зависит от типа объекта.
Существуют четыре различных типа объекта: "blob", "tree", "commit" и "tag".

- **"blob"** (сырые двоичные данные) используется для хранения содержимого файла, собственно говоря, это и есть сам файл.
- **"tree"** (дерево) в основном похоже на директорию (папку в файловой системе) - это ссылки на множество других объектов типа tree и/или blob (т.е. файлов и/или поддиректорий).
- **"commit"** (коммит, фиксация изменений) указывает на объект типа tree, который показывает, как выглядел проект в определенный момент времени.
    Он содержит метаинформацию об этом моменте времени, например, о времени создания/модификции этого объекта, авторе изменений, ссылку на предыдущую фиксацию, и т.д.
- **"tag"** (тег, метка) - это способ указать определенную фиксацию (commit) как особый в некотором смысле.

Обычно он используется для отметки некоторых объектов типа commit как особых релизов или что-то в этом роде.
Почти все в Git построено на управлении этой простой структурой из четырех различных типов объектов.
Это похоже на небольшую файловую систему, находящуюся поверх файловой системы компьютера.

### Отличия от SVN ###

Важно заметить, что Git сильно отличается от большинства систем контроля версий, с которыми вы можете быть знакомы.
Subversion, CVS, Perforce, Mercurial и прочие используют систему _хранения изменений_ - они хранят различия между двумя последовательными фиксациями.
Git поступает по-другому - он сохраняет снимок (snapshot) всех файлов вашего проекта каждый раз, как вы фиксируете изменения.
При использовании Git это очень важная для понимания концепция.


